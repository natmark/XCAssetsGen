import Foundation
import XCAssetsKit

func getTabString(nestCount: Int) -> String {
    return [String](repeating: "\t", count: nestCount).joined()
}

public struct Generator {
    public static func generate(url: URL, config: Config) throws {
        if let color = config.color, let image = config.image, color.output == image.output {
            var outputLines = [String]()
            outputLines.append("// Generated by XCAssetsGen - \(XCAssetsGenKitVersion.current)")
            outputLines.append("")
            outputLines.append("import UIKit")

            outputLines.append("class ImageProvider {")
            outputLines.append("\t" + "static func image(named name: String) -> UIImage? {")
            outputLines.append("\t" + "\t" + "let bundle = Bundle(for: ImageProvider.self)")
            outputLines.append("\t" + "\t" + "return UIImage(named: name, in: bundle, compatibleWith: nil)")
            outputLines.append("\t" + "}")
            outputLines.append("}")

            for input in image.inputs {
                print("▶︎ ImageAsset: \(input)")
                let xcassets = try XCAssets(fileURL: url.appendingPathComponent(input))
                outputLines += ImageGenerator.generate(xcassets: xcassets)
            }

            outputLines.append("class ColorProvider {")
            outputLines.append("\t" + "static func color(named name: String) -> UIColor? {")
            outputLines.append("\t" + "\t" + "let bundle = Bundle(for: ColorProvider.self)")
            outputLines.append("\t" + "\t" + "return UIColor(named: name, in: bundle, compatibleWith: nil)")
            outputLines.append("\t" + "}")
            outputLines.append("}")

            for input in color.inputs {
                print("▶︎ ColorAsset: \(input)")
                let xcassets = try XCAssets(fileURL: url.appendingPathComponent(input))
                outputLines += ColorGenerator.generate(xcassets: xcassets)
            }

            try outputLines.joined(separator: "\n").write(to: url.appendingPathComponent(color.output), atomically: true, encoding: .utf8)
            print("⚙ Generating: \(url.appendingPathComponent(color.output).absoluteString)")
        } else {
            if let color = config.color {
                var outputLines = [String]()
                outputLines.append("// Generated by XCAssetsGen - \(XCAssetsGenKitVersion.current)")
                outputLines.append("")
                outputLines.append("import UIKit")

                outputLines.append("class ColorProvider {")
                outputLines.append("\t" + "static func color(named name: String) -> UIColor? {")
                outputLines.append("\t" + "\t" + "let bundle = Bundle(for: ColorProvider.self)")
                outputLines.append("\t" + "\t" + "return UIColor(named: name, in: bundle, compatibleWith: nil)")
                outputLines.append("\t" + "}")
                outputLines.append("}")

                for input in color.inputs {
                    print("▶︎ ColorAsset: \(input)")
                    let xcassets = try XCAssets(fileURL: url.appendingPathComponent(input))
                    outputLines += ColorGenerator.generate(xcassets: xcassets)
                }

                try outputLines.joined(separator: "\n").write(to: url.appendingPathComponent(color.output), atomically: true, encoding: .utf8)
                print("⚙ Generating: \(url.appendingPathComponent(color.output).absoluteString)")
            }
            if let image = config.image {
                var outputLines = [String]()
                outputLines.append("// Generated by XCAssetsGen - \(XCAssetsGenKitVersion.current)")
                outputLines.append("")
                outputLines.append("import UIKit")

                outputLines.append("class ImageProvider {")
                outputLines.append("\t" + "static func image(named name: String) -> UIImage? {")
                outputLines.append("\t" + "\t" + "let bundle = Bundle(for: ImageProvider.self)")
                outputLines.append("\t" + "\t" + "return UIImage(named: name, in: bundle, compatibleWith: nil)")
                outputLines.append("\t" + "}")
                outputLines.append("}")

                for input in image.inputs {
                    print("▶︎ ImageAsset: \(input)")
                    let xcassets = try XCAssets(fileURL: url.appendingPathComponent(input))
                    outputLines += ImageGenerator.generate(xcassets: xcassets)
                }
                try outputLines.joined(separator: "\n").write(to: url.appendingPathComponent(image.output), atomically: true, encoding: .utf8)
                print("⚙ Generating: \(url.appendingPathComponent(image.output).absoluteString)")
            }
        }
    }
}
